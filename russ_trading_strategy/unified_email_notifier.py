#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Áªü‰∏ÄËµÑ‰∫ßÂàÜÊûêÊä•ÂëäÈÇÆ‰ª∂ÂèëÈÄÅÊ®°Âùó
Unified Asset Analysis Email Notifier
"""

import smtplib
import yaml
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.header import Header
from typing import Dict
from datetime import datetime
import logging
from pathlib import Path


class UnifiedEmailNotifier:
    """Áªü‰∏ÄËµÑ‰∫ßÂàÜÊûêÊä•ÂëäÈÇÆ‰ª∂ÈÄöÁü•Âô®"""

    def __init__(self, config_path: str = None):
        """
        ÂàùÂßãÂåñÈÇÆ‰ª∂ÈÄöÁü•Âô®

        Args:
            config_path: ÈÖçÁΩÆÊñá‰ª∂Ë∑ØÂæÑ,ÈªòËÆ§‰∏∫È°πÁõÆÊ†πÁõÆÂΩïÁöÑ config/email_config.yaml
        """
        # ÂÖàÂàùÂßãÂåñlogger
        self.logger = logging.getLogger(__name__)

        if config_path is None:
            # __file__ = .../stock-analysis/russ_trading_strategy/unified_email_notifier.py
            # parent = .../stock-analysis/russ_trading_strategy
            # parent.parent = .../stock-analysis (È°πÁõÆÊ†πÁõÆÂΩï)
            project_root = Path(__file__).parent.parent
            config_path = project_root / 'config' / 'email_config.yaml'

        self.config = self._load_config(config_path)

    def _load_config(self, config_path: Path) -> Dict:
        """Âä†ËΩΩÈÇÆÁÆ±ÈÖçÁΩÆ"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            return config
        except FileNotFoundError:
            self.logger.error(f"ÈÖçÁΩÆÊñá‰ª∂Êú™ÊâæÂà∞: {config_path}")
            self.logger.info("ËØ∑ÂèÇËÄÉ config/email_config.yaml.template ÂàõÂª∫ÈÖçÁΩÆÊñá‰ª∂")
            raise
        except Exception as e:
            self.logger.error(f"Âä†ËΩΩÈÖçÁΩÆÊñá‰ª∂Â§±Ë¥•: {str(e)}")
            raise

    def send_unified_report(self, report: Dict, text_content: str) -> bool:
        """
        ÂèëÈÄÅÁªü‰∏ÄËµÑ‰∫ßÂàÜÊûêÊä•ÂëäÈÇÆ‰ª∂

        Args:
            report: Êä•ÂëäÊï∞ÊçÆÂ≠óÂÖ∏
            text_content: ÊñáÊú¨Ê†ºÂºèÊä•Âëä

        Returns:
            ÊòØÂê¶ÂèëÈÄÅÊàêÂäü
        """
        date = report.get('date', datetime.now().strftime('%Y-%m-%d'))

        # ËÆ°ÁÆóÊï¥‰ΩìË∂ãÂäø
        assets_data = report.get('assets', {})
        bullish_count = 0
        bearish_count = 0
        total_count = 0

        for asset_data in assets_data.values():
            if 'error' in asset_data:
                continue
            total_count += 1
            judgment = asset_data.get('comprehensive_judgment', {})
            direction = judgment.get('direction', '')
            if 'ÁúãÂ§ö' in direction:
                bullish_count += 1
            elif 'ÁúãÁ©∫' in direction:
                bearish_count += 1

        # Á°ÆÂÆöÈÇÆ‰ª∂‰∏ªÈ¢ò
        if bullish_count >= total_count * 0.6:
            subject = f"üìà „ÄêÂÅèÂ§ö„ÄëÁªü‰∏ÄËµÑ‰∫ßÂàÜÊûê - {bullish_count}‰∏™ÁúãÂ§ö"
        elif bearish_count >= total_count * 0.6:
            subject = f"üìâ „ÄêÂÅèÁ©∫„ÄëÁªü‰∏ÄËµÑ‰∫ßÂàÜÊûê - {bearish_count}‰∏™ÁúãÁ©∫"
        else:
            subject = f"‚û°Ô∏è „Äê‰∏≠ÊÄß„ÄëÁªü‰∏ÄËµÑ‰∫ßÂàÜÊûê - Â§öÁ©∫ÂàÜÂåñ"

        subject += f" ({total_count}‰∏™Ê†áÁöÑ, {date})"

        # ÊûÑÂª∫HTMLÈÇÆ‰ª∂ÂÜÖÂÆπ
        html_content = self._format_html_content(report)

        # ‰ªéÈÖçÁΩÆÊñá‰ª∂Ëé∑ÂèñÊî∂‰ª∂‰∫∫ÂàóË°®
        recipients = self.config.get('recipients', ['1264947688@qq.com'])

        # ÂèëÈÄÅÈÇÆ‰ª∂ - ÁªôÊØè‰∏™Êî∂‰ª∂‰∫∫ÂçïÁã¨ÂèëÈÄÅ‰∏ÄÂ∞Å,ÊØèÊ¨°ÈÉΩÂª∫Á´ãÊñ∞ËøûÊé•
        success_count = 0
        failed_recipients = []

        # ‰∏∫ÊØè‰∏™Êî∂‰ª∂‰∫∫ÂçïÁã¨ÂàõÂª∫ËøûÊé•ÂíåÂèëÈÄÅÈÇÆ‰ª∂
        for recipient in recipients:
            try:
                # ÊØè‰∏™Êî∂‰ª∂‰∫∫Âª∫Á´ãÁã¨Á´ãÁöÑSMTPËøûÊé•
                smtp = smtplib.SMTP_SSL(
                    self.config['smtp']['server'],
                    self.config['smtp']['port']
                )
                smtp.login(
                    self.config['sender']['email'],
                    self.config['sender']['password']
                )

                # ÂàõÂª∫ÈÇÆ‰ª∂
                message = MIMEMultipart('alternative')
                message['From'] = self.config['sender']['email']
                message['To'] = recipient  # Âçï‰∏™Êî∂‰ª∂‰∫∫
                message['Subject'] = Header(subject, 'utf-8')
                message['X-Priority'] = '3'

                # Ê∑ªÂä†Á∫ØÊñáÊú¨ÂíåHTMLÁâàÊú¨
                text_part = MIMEText(text_content, 'plain', 'utf-8')
                html_part = MIMEText(html_content, 'html', 'utf-8')
                message.attach(text_part)
                message.attach(html_part)

                # ÂèëÈÄÅÁªôÂΩìÂâçÊî∂‰ª∂‰∫∫
                smtp.sendmail(
                    self.config['sender']['email'],
                    [recipient],
                    message.as_string()
                )

                smtp.quit()
                success_count += 1
                self.logger.info(f"‚úÖ ÈÇÆ‰ª∂ÂèëÈÄÅÊàêÂäü: {recipient}")

            except Exception as e:
                failed_recipients.append(recipient)
                self.logger.error(f"‚ùå ÂèëÈÄÅÂà∞ {recipient} Â§±Ë¥•: {str(e)}")
                try:
                    smtp.quit()
                except:
                    pass

        # Ê±áÊÄªÁªìÊûú
        if success_count == len(recipients):
            self.logger.info(f"üéâ ÊâÄÊúâÈÇÆ‰ª∂ÂèëÈÄÅÊàêÂäü(ÂÖ±{success_count}‰∏™Êî∂‰ª∂‰∫∫): {subject}")
            return True
        elif success_count > 0:
            self.logger.warning(f"‚ö†Ô∏è ÈÉ®ÂàÜÈÇÆ‰ª∂ÂèëÈÄÅÊàêÂäü({success_count}/{len(recipients)}),Â§±Ë¥•ÁöÑÊî∂‰ª∂‰∫∫: {', '.join(failed_recipients)}")
            return True
        else:
            self.logger.error(f"‚ùå ÊâÄÊúâÈÇÆ‰ª∂ÂèëÈÄÅÂ§±Ë¥•")
            return False

    def _format_html_content(self, report: Dict) -> str:
        """Ê†ºÂºèÂåñHTMLÈÇÆ‰ª∂ÂÜÖÂÆπ,ÂØπÈΩêmarkdownÊä•ÂëäÊ†ºÂºè"""
        date = report.get('date', datetime.now().strftime('%Y-%m-%d'))
        assets_data = report.get('assets', {})

        # ËÆ°ÁÆóÊï¥‰ΩìË∂ãÂäø
        bullish_count = 0
        bearish_count = 0
        total_count = 0

        for asset_data in assets_data.values():
            if 'error' in asset_data:
                continue
            total_count += 1
            judgment = asset_data.get('comprehensive_judgment', {})
            direction = judgment.get('direction', '')
            if 'ÁúãÂ§ö' in direction:
                bullish_count += 1
            elif 'ÁúãÁ©∫' in direction:
                bearish_count += 1

        # ÈÄâÊã©È¢úËâ≤
        if bullish_count >= total_count * 0.6:
            header_color = "#28a745"  # ÁªøËâ≤
            trend_icon = "üìà"
            trend_text = "ÂÅèÂ§ö"
        elif bearish_count >= total_count * 0.6:
            header_color = "#dc3545"  # Á∫¢Ëâ≤
            trend_icon = "üìâ"
            trend_text = "ÂÅèÁ©∫"
        else:
            header_color = "#6c757d"  # ÁÅ∞Ëâ≤
            trend_icon = "‚û°Ô∏è"
            trend_text = "‰∏≠ÊÄß"

        html = f"""
<html>
<head>
<meta charset="utf-8">
<style>
    body {{
        font-family: Arial, 'Microsoft YaHei', sans-serif;
        line-height: 1.6;
        margin: 0;
        padding: 0;
        background-color: #f5f5f5;
    }}
    .container {{
        max-width: 1000px;
        margin: 20px auto;
        background-color: white;
    }}
    .header {{
        background: linear-gradient(135deg, {header_color} 0%, {header_color}cc 100%);
        color: white;
        padding: 30px 20px;
        text-align: center;
    }}
    .header h1 {{
        margin: 0;
        font-size: 28px;
    }}
    .header .subtitle {{
        font-size: 16px;
        margin-top: 10px;
        opacity: 0.9;
    }}
    .overview {{
        background-color: #f8f9fa;
        padding: 20px 25px;
        border-bottom: 2px solid #dee2e6;
    }}
    .overview h2 {{
        font-size: 20px;
        color: {header_color};
        margin: 0 0 15px 0;
    }}
    .overview-stats {{
        display: flex;
        gap: 30px;
        font-size: 14px;
    }}
    .stat-item {{
        color: #495057;
    }}
    .stat-item strong {{
        color: #212529;
    }}
    .summary-table {{
        padding: 25px;
        background-color: white;
    }}
    .summary-table h2 {{
        font-size: 20px;
        color: {header_color};
        margin: 0 0 15px 0;
        border-left: 4px solid {header_color};
        padding-left: 12px;
    }}
    table {{
        width: 100%;
        border-collapse: collapse;
        font-size: 13px;
        margin-top: 15px;
    }}
    th {{
        background-color: {header_color};
        color: white;
        padding: 12px 8px;
        text-align: left;
        font-weight: 600;
    }}
    td {{
        padding: 10px 8px;
        border-bottom: 1px solid #e9ecef;
    }}
    tr:hover {{
        background-color: #f8f9fa;
    }}
    .positive {{ color: #28a745; font-weight: bold; }}
    .negative {{ color: #dc3545; font-weight: bold; }}
    .section {{
        padding: 25px;
        border-bottom: 1px solid #e0e0e0;
    }}
    .section-title {{
        font-size: 20px;
        font-weight: bold;
        color: #333;
        margin-bottom: 20px;
        border-left: 4px solid {header_color};
        padding-left: 12px;
    }}
    .subsection-title {{
        font-size: 16px;
        font-weight: bold;
        color: {header_color};
        margin: 15px 0 10px 0;
    }}
    .info-grid {{
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 10px;
        margin: 10px 0;
    }}
    .info-item {{
        font-size: 14px;
        color: #495057;
    }}
    .info-item strong {{
        color: #212529;
    }}
    .strategies {{
        background-color: #fff3cd;
        border-left: 4px solid #ffc107;
        padding: 12px 15px;
        margin: 10px 0;
        border-radius: 4px;
    }}
    .strategies ul {{
        margin: 5px 0;
        padding-left: 20px;
    }}
    .strategies li {{
        margin: 3px 0;
    }}
    .tech-grid {{
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 8px;
        margin: 10px 0;
    }}
    .tech-item {{
        font-size: 13px;
        padding: 8px;
        background-color: #f8f9fa;
        border-radius: 4px;
        text-align: center;
    }}
    .footer {{
        background-color: #343a40;
        color: white;
        padding: 20px;
        text-align: center;
        font-size: 12px;
    }}
    .risk-low {{ color: #28a745; }}
    .risk-medium {{ color: #ffc107; }}
    .risk-high {{ color: #dc3545; }}
</style>
</head>
<body>
<div class="container">
    <div class="header">
        <h1>{trend_icon} Áªü‰∏ÄËµÑ‰∫ßÂàÜÊûêÊä•Âëä</h1>
        <div class="subtitle">ÊåáÊï∞ + ÊùøÂùó + ‰∏™ËÇ° ÂÖ®Èù¢ÂàÜÊûê</div>
        <div class="subtitle">Êï¥‰ΩìË∂ãÂäø: {trend_text} | ÂàÜÊûêÊ†áÁöÑ: {total_count}‰∏™ | {date}</div>
    </div>

    <div class="overview">
        <h2>üìã ÂàÜÊûêÊ¶ÇËßà</h2>
        <div class="overview-stats">
            <div class="stat-item"><strong>ÊÄªËµÑ‰∫ßÊï∞:</strong> {total_count}</div>
            <div class="stat-item"><strong>ÊàêÂäüÂàÜÊûê:</strong> {len([d for d in assets_data.values() if 'error' not in d])}</div>
            <div class="stat-item"><strong>ÁúãÂ§ö:</strong> <span class="positive">{bullish_count}</span></div>
            <div class="stat-item"><strong>ÁúãÁ©∫:</strong> <span class="negative">{bearish_count}</span></div>
        </div>
    </div>

    <div class="summary-table">
        <h2>üìä Ê†áÁöÑÊ±áÊÄª</h2>
        {self._generate_summary_table_html(report)}
    </div>
"""

        # ÊåâÁ±ªÂà´Ê∏≤ÊüìËµÑ‰∫ßËØ¶ÊÉÖ
        html += self._render_assets_by_category(assets_data)

        html += f"""
    <div class="footer">
        <p>üìä Claude Code ÈáèÂåñÂàÜÊûêÁ≥ªÁªü | Áªü‰∏ÄËµÑ‰∫ß‰∏ìÈ°πÂàÜÊûê</p>
        <p>ÂàÜÊûêÁª¥Â∫¶: 11Â§ßÁª¥Â∫¶ÂÖ®Èù¢Ë¶ÜÁõñ</p>
        <p>ÁîüÊàêÊó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        <p>Êú¨ÈÇÆ‰ª∂Áî±Á≥ªÁªüËá™Âä®ÁîüÊàê,ËØ∑ÂãøÁõ¥Êé•ÂõûÂ§ç</p>
    </div>
</div>
</body>
</html>
"""
        return html

    def _generate_summary_table_html(self, report: Dict) -> str:
        """ÁîüÊàêÊ±áÊÄªË°®Ê†ºHTML"""
        assets_data = report.get('assets', {})

        rows = []
        for asset_key, data in assets_data.items():
            if 'error' in data:
                continue

            # Ëé∑ÂèñËµÑ‰∫ßÂêçÁß∞
            asset_name = data.get('asset_name') or data.get('sector_name', asset_key)

            # Ëé∑ÂèñÂéÜÂè≤ÂàÜÊûêÊï∞ÊçÆ
            hist = data.get('historical_analysis', {})
            current_price = hist.get('current_price', 0)
            change_pct = hist.get('current_change_pct', 0)
            change_class = 'positive' if change_pct >= 0 else 'negative'
            change_emoji = "üìà" if change_pct >= 0 else "üìâ"

            # ÁªºÂêàÂà§Êñ≠
            judgment = data.get('comprehensive_judgment', {})
            direction = judgment.get('direction', 'N/A')
            position = judgment.get('recommended_position', 'N/A')

            # 20Êó•‰∏äÊ∂®Ê¶ÇÁéá
            stats_20d = hist.get('20d', {})
            up_prob_20d = stats_20d.get('up_prob', 0)
            prob_class = 'positive' if up_prob_20d > 0.5 else 'negative'

            # È£éÈô©Á≠âÁ∫ß
            risk = data.get('risk_assessment', {})
            risk_level = risk.get('risk_level', 'N/A')
            if '‰ΩéÈ£éÈô©' in risk_level or '‰ΩéÈ£éÈô©üü¢' in risk_level:
                risk_class = 'risk-low'
                risk_emoji = '‚úÖ'
            elif '‰∏≠È£éÈô©' in risk_level:
                risk_class = 'risk-medium'
                risk_emoji = '‚ö†Ô∏è'
            else:
                risk_class = 'risk-high'
                risk_emoji = 'üî¥'

            # ÊåÅÊúâÂª∫ËÆÆ - ‰ªé strategies ‰∏≠ÊèêÂèñÂåÖÂê´"ÊåÅÊúâ"ÁöÑÂª∫ËÆÆ
            strategies = judgment.get('strategies', [])
            hold_suggestion = '-'
            for strategy in strategies:
                # ÂåπÈÖçÂåÖÂê´"ÊåÅÊúâ"ÂÖ≥ÈîÆËØçÁöÑÂª∫ËÆÆ
                if 'ÊåÅÊúâ' in strategy:
                    hold_suggestion = strategy
                    break

            rows.append(f"""
            <tr>
                <td><strong>{asset_name}</strong></td>
                <td>{current_price:.2f}</td>
                <td class="{change_class}">{change_pct:+.2f}% {change_emoji}</td>
                <td>{direction}</td>
                <td>{position}</td>
                <td class="{prob_class}">{up_prob_20d:.1%}</td>
                <td class="{risk_class}">{risk_emoji} {risk_level}</td>
                <td>{hold_suggestion}</td>
            </tr>
            """)

        table_html = f"""
        <table>
            <thead>
                <tr>
                    <th>Ê†áÁöÑÂêçÁß∞</th>
                    <th>ÂΩìÂâç‰ª∑Ê†º</th>
                    <th>Ê∂®Ë∑åÂπÖ</th>
                    <th>ÊñπÂêëÂà§Êñ≠</th>
                    <th>Âª∫ËÆÆ‰ªì‰Ωç</th>
                    <th>20Êó•‰∏äÊ∂®Ê¶ÇÁéá</th>
                    <th>È£éÈô©Á≠âÁ∫ß</th>
                    <th>ÊåÅÊúâÂª∫ËÆÆ</th>
                </tr>
            </thead>
            <tbody>
                {''.join(rows)}
            </tbody>
        </table>
        """
        return table_html

    def _render_assets_by_category(self, assets_data: Dict) -> str:
        """ÊåâÁ±ªÂà´Ê∏≤ÊüìËµÑ‰∫ßËØ¶ÊÉÖ"""
        from russ_trading_strategy.unified_config import UNIFIED_ASSETS

        # ÊåâÁ±ªÂà´ÂàÜÁªÑ
        categories = {}
        for asset_key, data in assets_data.items():
            if 'error' in data:
                continue

            config = UNIFIED_ASSETS.get(asset_key, {})
            category = config.get('category', 'other')

            if category not in categories:
                categories[category] = []
            categories[category].append((asset_key, data, config))

        html_parts = []

        # Á±ªÂà´ÂêçÁß∞Êò†Â∞Ñ
        category_names = {
            'tech_index': 'üöÄ ÂõõÂ§ßÁßëÊäÄÊåáÊï∞',
            'broad_index': 'üìä ÂÆΩÂü∫ÊåáÊï∞',
            'commodity': 'üí∞ Â§ßÂÆóÂïÜÂìÅ',
            'crypto': '‚Çø Âä†ÂØÜË¥ßÂ∏Å',
            'healthcare': 'üè• ÂåªÁñóÂÅ•Â∫∑',
            'energy': 'üîã ËÉΩÊ∫êÁîµÊ±†',
            'chemical': 'üß™ ÂåñÂ∑•',
            'coal': '‚õèÔ∏è ÁÖ§ÁÇ≠',
            'consumer': 'üç∑ Ê∂àË¥π',
            'finance': 'üíº ÈáëËûç',
            'media': 'üéÆ ‰º†Â™íÊ∏∏Êàè',
            'tech': 'üíª ÁßëÊäÄ',
            'materials': 'üè≠ ÂéüÊùêÊñô',
            'manufacturing': 'üèóÔ∏è Âà∂ÈÄ†‰∏ö'
        }

        for category, assets in categories.items():
            category_name = category_names.get(category, category.upper())

            html_parts.append(f"""
    <div class="section">
        <div class="section-title">{category_name}</div>
""")

            for asset_key, data, config in assets:
                html_parts.append(self._render_single_asset(asset_key, data, config))

            html_parts.append("    </div>")

        return '\n'.join(html_parts)

    def _render_single_asset(self, asset_key: str, data: Dict, config: Dict) -> str:
        """Ê∏≤ÊüìÂçï‰∏™ËµÑ‰∫ßËØ¶ÊÉÖ"""
        asset_name = data.get('asset_name') or data.get('sector_name', config.get('name', asset_key))

        html = f"""
        <div style="background-color: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 8px; border: 1px solid #dee2e6;">
            <h3 style="margin: 0 0 15px 0; color: #495057; font-size: 18px;">{asset_name}</h3>
"""

        # 1. ÂΩìÂâçÁÇπ‰Ωç
        hist = data.get('historical_analysis', {})
        if hist and 'current_price' in hist:
            current_price = hist.get('current_price', 0)
            change_pct = hist.get('current_change_pct', 0)
            change_class = 'positive' if change_pct >= 0 else 'negative'
            change_emoji = "üìà" if change_pct >= 0 else "üìâ"

            html += f"""
            <div class="subsection-title">üìç ÂΩìÂâçÁÇπ‰Ωç</div>
            <div class="info-grid">
                <div class="info-item"><strong>ÊúÄÊñ∞‰ª∑Ê†º:</strong> {current_price:.2f}</div>
                <div class="info-item"><strong>Ê∂®Ë∑åÂπÖ:</strong> <span class="{change_class}">{change_pct:+.2f}% {change_emoji}</span></div>
            </div>
"""

        # 2. ÁªºÂêàÂà§Êñ≠
        judgment = data.get('comprehensive_judgment', {})
        if judgment:
            direction = judgment.get('direction', 'N/A')
            position = judgment.get('recommended_position', 'N/A')
            strategies = judgment.get('strategies', [])

            html += f"""
            <div class="subsection-title">üí° ÁªºÂêàÂà§Êñ≠</div>
            <div class="info-grid">
                <div class="info-item"><strong>ÊñπÂêëÂà§Êñ≠:</strong> {direction}</div>
                <div class="info-item"><strong>Âª∫ËÆÆ‰ªì‰Ωç:</strong> {position}</div>
            </div>
"""

            if strategies:
                html += """
            <div class="strategies">
                <strong>Êìç‰ΩúÁ≠ñÁï•:</strong>
                <ul>
"""
                for strategy in strategies[:5]:  # ÊúÄÂ§öÊòæÁ§∫5Êù°
                    html += f"                    <li>{strategy}</li>\n"
                html += """
                </ul>
            </div>
"""

        # 3. ÂéÜÂè≤ÁÇπ‰ΩçÂàÜÊûê
        if hist and '20d' in hist:
            stats_20d = hist.get('20d', {})
            up_prob = stats_20d.get('up_prob', 0)
            mean_return = stats_20d.get('mean_return', 0)
            prob_class = 'positive' if up_prob > 0.5 else 'negative'
            return_class = 'positive' if mean_return > 0 else 'negative'

            html += f"""
            <div class="subsection-title">üìà ÂéÜÂè≤ÁÇπ‰ΩçÂàÜÊûê</div>
            <div class="info-grid">
                <div class="info-item"><strong>Áõ∏‰ººÁÇπ‰Ωç:</strong> {hist.get('similar_periods_count', 0)} ‰∏™</div>
                <div class="info-item"><strong>20Êó•‰∏äÊ∂®Ê¶ÇÁéá:</strong> <span class="{prob_class}">{up_prob:.1%}</span></div>
                <div class="info-item"><strong>Âπ≥ÂùáÊî∂Áõä:</strong> <span class="{return_class}">{mean_return:+.2%}</span></div>
                <div class="info-item"><strong>ÁΩÆ‰ø°Â∫¶:</strong> {stats_20d.get('confidence', 0):.1%}</div>
            </div>
"""

        # 4. ÊäÄÊúØÈù¢ÂàÜÊûê
        tech = data.get('technical_analysis', {})
        if tech and 'error' not in tech:
            tech_items = []

            if 'macd' in tech:
                macd_status = '‚úÖ ÈáëÂèâ' if tech['macd']['status'] == 'golden_cross' else 'üî¥ Ê≠ªÂèâ'
                tech_items.append(f"<div class='tech-item'><strong>MACD</strong><br>{macd_status}</div>")

            if 'rsi' in tech:
                rsi_val = tech['rsi']['value']
                rsi_status = {'overbought': '‚ö†Ô∏è Ë∂Ö‰π∞', 'oversold': '‚úÖ Ë∂ÖÂçñ', 'normal': 'üòä Ê≠£Â∏∏'}.get(tech['rsi']['status'], '')
                tech_items.append(f"<div class='tech-item'><strong>RSI</strong><br>{rsi_val:.1f}<br>{rsi_status}</div>")

            if 'kdj' in tech:
                kdj = tech['kdj']
                kdj_signal = '‚úÖ' if kdj['signal'] == 'golden_cross' else 'üî¥'
                tech_items.append(f"<div class='tech-item'><strong>KDJ</strong><br>K={kdj['k']:.1f}<br>{kdj_signal}</div>")

            if 'boll' in tech:
                boll = tech['boll']
                boll_pos = boll['position'] * 100
                tech_items.append(f"<div class='tech-item'><strong>Â∏ÉÊûóÂ∏¶</strong><br>{boll_pos:.0f}%</div>")

            if 'dmi_adx' in tech:
                dmi = tech['dmi_adx']
                direction_emoji = 'üìà' if dmi['direction'] == 'bullish' else 'üìâ'
                tech_items.append(f"<div class='tech-item'><strong>ADX</strong><br>{dmi['adx']:.1f}<br>{direction_emoji}</div>")

            if tech_items:
                html += f"""
            <div class="subsection-title">üîß ÊäÄÊúØÈù¢ÂàÜÊûê</div>
            <div class="tech-grid">
                {''.join(tech_items)}
            </div>
"""

        # 5. È£éÈô©ËØÑ‰º∞
        risk = data.get('risk_assessment', {})
        if risk:
            risk_score = risk.get('risk_score', 0)
            risk_level = risk.get('risk_level', 'N/A')
            risk_factors = risk.get('risk_factors', [])

            if '‰ΩéÈ£éÈô©' in risk_level or '‰ΩéÈ£éÈô©üü¢' in risk_level:
                risk_class = 'risk-low'
                risk_emoji = '‚úÖ'
            elif '‰∏≠È£éÈô©' in risk_level:
                risk_class = 'risk-medium'
                risk_emoji = '‚ö†Ô∏è'
            else:
                risk_class = 'risk-high'
                risk_emoji = 'üî¥'

            html += f"""
            <div class="subsection-title">‚ö†Ô∏è È£éÈô©ËØÑ‰º∞</div>
            <div class="info-item">
                <strong>ÁªºÂêàÈ£éÈô©:</strong> {risk_score:.2f}
                <span class="{risk_class}">{risk_emoji} {risk_level}</span>
            </div>
"""

            if risk_factors:
                html += "            <div class='info-item' style='margin-top: 5px;'><strong>È£éÈô©Âõ†Á¥†:</strong> "
                html += ", ".join(risk_factors[:3])  # ÊúÄÂ§öÊòæÁ§∫3Êù°
                html += "</div>\n"

        html += "        </div>\n"
        return html


    def send_position_report(self, report_data: Dict, text_content: str, date: str) -> bool:
        """
        ÂèëÈÄÅÊåÅ‰ªìË∞ÉÊï¥Êä•ÂëäÈÇÆ‰ª∂

        Args:
            report_data: Êä•ÂëäÂÖÉÊï∞ÊçÆÂ≠óÂÖ∏
            text_content: MarkdownÊ†ºÂºèÊä•ÂëäÂÜÖÂÆπ
            date: Êä•ÂëäÊó•Êúü

        Returns:
            ÊòØÂê¶ÂèëÈÄÅÊàêÂäü
        """
        # ÊûÑÂª∫ÈÇÆ‰ª∂‰∏ªÈ¢ò
        subject = f"üìä ÊåÅ‰ªìË∞ÉÊï¥Âª∫ËÆÆÊä•Âëä v2.0 - {date}"

        # ÊûÑÂª∫HTMLÈÇÆ‰ª∂ÂÜÖÂÆπ
        html_content = self._format_position_report_html(text_content, date)

        # ‰ªéÈÖçÁΩÆÊñá‰ª∂Ëé∑ÂèñÊî∂‰ª∂‰∫∫ÂàóË°®
        recipients = self.config.get('recipients', ['1264947688@qq.com'])

        # ÂèëÈÄÅÈÇÆ‰ª∂ - ÁªôÊØè‰∏™Êî∂‰ª∂‰∫∫ÂçïÁã¨ÂèëÈÄÅ‰∏ÄÂ∞Å
        success_count = 0
        failed_recipients = []

        for recipient in recipients:
            try:
                # ÊØè‰∏™Êî∂‰ª∂‰∫∫Âª∫Á´ãÁã¨Á´ãÁöÑSMTPËøûÊé•
                smtp = smtplib.SMTP_SSL(
                    self.config['smtp']['server'],
                    self.config['smtp']['port']
                )
                smtp.login(
                    self.config['sender']['email'],
                    self.config['sender']['password']
                )

                # ÂàõÂª∫ÈÇÆ‰ª∂
                message = MIMEMultipart('alternative')
                message['From'] = self.config['sender']['email']
                message['To'] = recipient
                message['Subject'] = Header(subject, 'utf-8')
                message['X-Priority'] = '3'

                # Ê∑ªÂä†Á∫ØÊñáÊú¨ÂíåHTMLÁâàÊú¨
                text_part = MIMEText(text_content, 'plain', 'utf-8')
                html_part = MIMEText(html_content, 'html', 'utf-8')
                message.attach(text_part)
                message.attach(html_part)

                # ÂèëÈÄÅÁªôÂΩìÂâçÊî∂‰ª∂‰∫∫
                smtp.sendmail(
                    self.config['sender']['email'],
                    [recipient],
                    message.as_string()
                )

                smtp.quit()
                success_count += 1
                self.logger.info(f"‚úÖ ÈÇÆ‰ª∂ÂèëÈÄÅÊàêÂäü: {recipient}")

            except Exception as e:
                failed_recipients.append(recipient)
                self.logger.error(f"‚ùå ÂèëÈÄÅÂà∞ {recipient} Â§±Ë¥•: {str(e)}")
                try:
                    smtp.quit()
                except:
                    pass

        # Ê±áÊÄªÁªìÊûú
        if success_count == len(recipients):
            self.logger.info(f"üéâ ÊâÄÊúâÈÇÆ‰ª∂ÂèëÈÄÅÊàêÂäü(ÂÖ±{success_count}‰∏™Êî∂‰ª∂‰∫∫): {subject}")
            return True
        elif success_count > 0:
            self.logger.warning(f"‚ö†Ô∏è ÈÉ®ÂàÜÈÇÆ‰ª∂ÂèëÈÄÅÊàêÂäü({success_count}/{len(recipients)}),Â§±Ë¥•ÁöÑÊî∂‰ª∂‰∫∫: {', '.join(failed_recipients)}")
            return True
        else:
            self.logger.error(f"‚ùå ÊâÄÊúâÈÇÆ‰ª∂ÂèëÈÄÅÂ§±Ë¥•")
            return False

    def _format_position_report_html(self, markdown_content: str, date: str) -> str:
        """
        Â∞ÜMarkdownÊåÅ‰ªìÊä•ÂëäËΩ¨Êç¢‰∏∫HTMLÈÇÆ‰ª∂Ê†ºÂºè

        Args:
            markdown_content: MarkdownÊ†ºÂºèÊä•Âëä
            date: Êä•ÂëäÊó•Êúü

        Returns:
            HTMLÊ†ºÂºèÈÇÆ‰ª∂ÂÜÖÂÆπ
        """
        # ÁÆÄÂçïÁöÑMarkdownËΩ¨HTMLÔºà‰øùÁïôÂÖ≥ÈîÆÊ†ºÂºèÔºâ
        html_body = markdown_content.replace('\n', '<br>\n')
        html_body = html_body.replace('###', '<h3>').replace('##', '<h2>').replace('#', '<h1>')
        html_body = html_body.replace('**', '<strong>').replace('*', '<em>')

        # ÊûÑÂª∫ÂÆåÊï¥HTML
        html = f"""
<html>
<head>
<meta charset="utf-8">
<style>
    body {{
        font-family: Arial, 'Microsoft YaHei', sans-serif;
        line-height: 1.6;
        margin: 0;
        padding: 0;
        background-color: #f5f5f5;
    }}
    .container {{
        max-width: 1000px;
        margin: 20px auto;
        background-color: white;
    }}
    .header {{
        background: linear-gradient(135deg, #4ECDC4 0%, #44A08D 100%);
        color: white;
        padding: 30px 20px;
        text-align: center;
    }}
    .header h1 {{
        margin: 0;
        font-size: 28px;
    }}
    .header .subtitle {{
        font-size: 16px;
        margin-top: 10px;
        opacity: 0.9;
    }}
    .content {{
        padding: 30px;
    }}
    .content h2 {{
        color: #4ECDC4;
        border-left: 4px solid #4ECDC4;
        padding-left: 12px;
        margin-top: 30px;
    }}
    .content h3 {{
        color: #44A08D;
        margin-top: 20px;
    }}
    table {{
        width: 100%;
        border-collapse: collapse;
        margin: 15px 0;
        font-size: 13px;
    }}
    th {{
        background-color: #4ECDC4;
        color: white;
        padding: 12px 8px;
        text-align: left;
        font-weight: 600;
    }}
    td {{
        padding: 10px 8px;
        border-bottom: 1px solid #e9ecef;
    }}
    tr:hover {{
        background-color: #f8f9fa;
    }}
    .positive {{ color: #28a745; font-weight: bold; }}
    .negative {{ color: #dc3545; font-weight: bold; }}
    .footer {{
        background-color: #343a40;
        color: white;
        padding: 20px;
        text-align: center;
        font-size: 12px;
    }}
    pre {{
        background-color: #f8f9fa;
        padding: 15px;
        border-left: 4px solid #4ECDC4;
        overflow-x: auto;
        font-family: 'Courier New', monospace;
        font-size: 12px;
    }}
</style>
</head>
<body>
<div class="container">
    <div class="header">
        <h1>üìä ÊåÅ‰ªìË∞ÉÊï¥Âª∫ËÆÆÊä•Âëä v2.0</h1>
        <div class="subtitle">Êú∫ÊûÑÁ∫ßÈáèÂåñÂàÜÊûê | ÊåÅ‰ªìÂÅ•Â∫∑ËØäÊñ≠ + È£éÈô©‰ºòÂåñÁ≠ñÁï•</div>
        <div class="subtitle">{date}</div>
    </div>

    <div class="content">
        {html_body}
    </div>

    <div class="footer">
        <p>üìä Claude Code ÈáèÂåñÂàÜÊûêÁ≥ªÁªü | Russ‰∏™‰∫∫ÊåÅ‰ªìÁ≠ñÁï• v2.0</p>
        <p>ÂàÜÊûêÁª¥Â∫¶: ÊâßË°åÊëòË¶Å | ÈáèÂåñÊåáÊ†á | ÂΩíÂõ†ÂàÜÊûê | ÂéãÂäõÊµãËØï | ÊÉÖÊôØÂàÜÊûê</p>
        <p>ÁîüÊàêÊó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        <p>Êú¨ÈÇÆ‰ª∂Áî±Á≥ªÁªüËá™Âä®ÁîüÊàê,ËØ∑ÂãøÁõ¥Êé•ÂõûÂ§ç</p>
    </div>
</div>
</body>
</html>
"""
        return html


if __name__ == '__main__':
    """ÊµãËØï‰ª£Á†Å"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )

    print("ÊµãËØïÈÇÆ‰ª∂ÂèëÈÄÅÊ®°Âùó...")
    print("Ê≥®ÊÑè: ÈúÄË¶ÅÂÖàÈÖçÁΩÆ config/email_config.yaml")
